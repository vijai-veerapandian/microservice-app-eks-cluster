# This workflow is triggered on a push to the main branch
name: Build and Deploy to EKS

on:
  push:
    branches: ["main"]

# Environment variables available to all jobs and steps in the workflow
env:
  AWS_REGION: us-west-2 # Change to your AWS region
  ECR_REPOSITORY: nginx-custom # Change to your ECR repository name
  EKS_CLUSTER_NAME: eks-blueprint-cluster # Change to your EKS cluster name

jobs:
  build-and-deploy:
    name: Build, Push, and Deploy
    runs-on: ubuntu-latest

    # These permissions are required for the OIDC connection and to federate with the AWS IAM role.
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build the docker image and tag it with the Git SHA
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          # Push the image to ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          # Set the image URI as an output for later steps
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Configure kubectl for EKS
        run: |
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Deploy to EKS
        run: |
          # Use kubectl to set the new image on the deployment. This triggers a rolling update.
          kubectl set image deployment/nginx-deployment nginx-container=${{ steps.build-image.outputs.image }}
